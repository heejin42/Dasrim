from django.shortcuts import render, redirect
from django.contrib import messages
from django.contrib import auth
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from dasrimproject.settings import BASE_DIR
from .models import Account, MyDiagnosis, Record
from konlpy.tag import Okt
from konlpy.tag import Kkma

import sys
import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams['font.family'] = 'Malgun Gothic'

pk_value=0
# Create your views here.


def record(request, user_pk):
    Users = User.objects.get(pk=user_pk)

    if request.POST:
        myrecord = Record(record_user=Users)
        myrecord.situation=request.POST['situation']
        myrecord.feel=request.POST['feel']
        myrecord.automatic=request.POST['automatic']
        myrecord.writer=request.POST['writer']
        myrecord.save()
    
    records = Record.objects.filter(record_user=Users)
    cnt = records.count()
    print(cnt)
    record_elly = Record.objects.filter(record_user=Users, writer='elly')
    
    context = {
            'user': Users,
            'records': records,
            'cnt': cnt,
            'record_elly' : record_elly
        }
    return render(request, 'record.html', context)


def service(request, user_pk):
    Users = User.objects.get(pk=user_pk)
    que = MyDiagnosis.objects.filter(diagnosis=Users)

    if que.count() < 1:   # Îç∞Ïù¥ÌÑ∞x
        datas = 0
    else:                 # Îç∞Ïù¥ÌÑ∞o
        datas = 1

    context = {
            'user': Users,
            'data': datas,
        }
    return render(request, 'service.html', context)

@csrf_exempt
def consult(request, user_pk):
    User_ = User.objects.get(pk=user_pk)
    Users = Account.objects.get(user=User_)
    global pk_value
    user_data=[]
    start_ment=[
        # "'ÏßÄÍ∏àÏùò ÎÇò' Í∑∏Î¶ºÏùÑ Í∑∏Î¶¨ÎäêÎùº Í≥†ÏÉùÌïòÏÖ®Ïñ¥Ïöî! Ïù¥Ï†úÎ∂ÄÌÑ¥ Ï†Ä üêòÏóòÎ¶¨üêòÏôÄ Ìï®Íªò ÏÉÅÎã¥ÏùÑ ÏãúÏûëÌï¥Î¥êÏöî! Ïñ∏Ï†úÎùºÎèÑ ÎÅùÎÇ¥Í∏∞üîöÎ•º ÏûÖÎ†•Ìï¥ ÏÉÅÎã¥ÏùÑ Ï¢ÖÎ£åÌï† Ïàò ÏûàÏñ¥Ïöî!",
        f'ÏãúÏûëÌïòÍ∏∞ Ï†ÑÏóê! Ïù∏ÏßÄ ÌñâÎèô ÏπòÎ£åÏóêÏÑú Ï§ëÏöîÌïú Í≤ÉÏùÄ {Users.nickname}ÎãòÏùò ÎßàÏùåÏÜç ÍπäÏùÄ Í≥≥Ïóê ÏûàÎäî ÏÉùÍ∞ÅÏùÑ ÏïåÏïÑÎÇ¥Ïïº Ìï¥Ïöî! Í∑∏Î¶¨Í≥† Í∑∏Í±∏ Ïû¨Íµ¨Ï°∞ÌôîÌï¥Ïïº Ìï¥Ïöî!',
        f'ÏïûÏúºÎ°ú 8~10Í∞úÏùò ÏßàÎ¨∏ÏùÑ ÌÜµÌï¥ÏÑú {Users.nickname}ÎãòÏùò Ïù∏ÏßÄ Íµ¨Ï°∞Î•º ÌååÏïÖÌï¥Î≥ºÍ≤åÏöî! ÏßàÎ¨∏Ïóê Ï≤úÏ≤úÌûà ÏÉùÍ∞ÅÌï¥Î≥¥ÏãúÍ≥† ÎãµÌï¥Ï£ºÏÑ∏ÏöîüòÜ, Í∑∏Îüº ÏãúÏûëÌï¥Î≥ºÍπåÏöî?',
        'Ïò§Îäò ÌïòÎ£® Ïñ¥Îï†ÎÇòÏöî?'
                ]

        
    print('first pass')
    myrecord = Record()
    myrecord.record_user = request.user
    myrecord.count=1
    myrecord.save()
    print('myrecord.pk:',myrecord.pk)
    pk_value = myrecord.pk

        
    
        
    if request.POST.getlist('user_data[]') != [] :
        
        # user_data ÏÉÅÌô©, ÏûêÏÇ¨, Í∞êÏ†ï, Ïù∏ÏßÄÏ†ÅÏò§Î•ò, ÌïµÏã¨Ïã†ÎÖê ÏàúÏÑú
        # print('request : ',request.POST)
        print('second pass')
        myrecord = Record.objects.filter(record_user=User_, pk=pk_value)
        # Î∞õÏïÑÏò® Îç∞Ïù¥ÌÑ∞
        print('myrecord:',myrecord)

        user_data = request.POST.getlist('user_data[]')
        print('user_data : ',user_data)

        myrecord.update(situation=user_data[0],
        automatic=user_data[1],
        feel=user_data[2],
        cognitive_error=user_data[3],
        core_belief=user_data[4],
        writer='elly')

    context = {
            'user': User_,
            'users': Users,
            'myrecord':myrecord,
            'ment': start_ment[:-1],
            'ment_final': start_ment[-1]
        }
        # Ïú†Ï†Ä Îç∞Ïù¥ÌÑ∞ DBÏóê Ï†ÄÏû•
    return render(request, 'consult.html', context)    


def explain(request, user_pk):
    Users = User.objects.get(pk=user_pk)

    context = {
        'user': Users,
    }
    return render(request, 'explain.html', context)


def result(request, user_pk, dia_pk):
    Users = User.objects.get(pk=user_pk)
    # que = MyDiagnosis.objects.get(diagnosis=Users)

    if request.POST:
        mydia = MyDiagnosis.objects.get(pk=dia_pk)
        mydia.feel = request.POST['feeling']
        mydia.save()
        sys.stdout.flush()
        
        summary = mydia.summary
        self_select = mydia.self_select
        feel = mydia.feel

        # ------------------------------ Ï†ïÏÑúÎÇ¥Ïö© Î™®Îç∏ ------------------------------

        file_path = os.path.join(BASE_DIR, 'mainapp/sentiment.csv')
        sentiment = pd.read_csv(file_path)

        POS = sentiment['value'] == 'POS'
        NEG = sentiment['value'] == 'NEG'
        is_POS = sentiment[POS]
        is_NEG = sentiment[NEG]
        POS_words = is_POS['word'].values.tolist()
        NEG_words = is_NEG['word'].values.tolist()

        kkma = Kkma()
        morphs = []
        pos = kkma.pos(summary) 
        # print('kkmaÌòïÌÉúÏÜå Î∂ÑÏÑù :  ', pos)
        for i in pos: # ['JKS','JKC','JKG','JKO','JKM','JKI','JKQ','JC','EPH','EPT','EPP','EFN','EFQ','EFO','EFA','EFI','EFR','ECE','ECD','ECS','ETN','ETD','XPN','XPV','XSN','XSV','XSA','SF','SP','SS','SE','SO','SW']
            if i[1] not in ['JKS','JKC','JKG','JKO','JKM','JKI','JKQ','JC','EPH','EPT','EPP','EFN','EFQ','EFO','EFA','EFI','EFR','ECE','ECD','ECS','ETN','ETD','XPN','XPV','XSN','XSV','XSA','SF','SP','SS','SE','SO','SW']:
                morphs.append(i[0])
            else:
                pass
        total = len(morphs)
        # print('ÎÇòÎà†ÏßÑ ÌòïÌÉúÏÜå :   ', total)

        POS_score = 0
        count = 0
        match_list = []
        for i in range(0,total):
            if morphs[i] in POS_words:
                POS_score += 1
                count += 1
                match_list.append(morphs[i])
            elif morphs[i] in NEG_words:
                POS_score += -1
                count += 1
                match_list.append(morphs[i])
            else:
                pass
        # print('POS_score :   ',POS_score)
        # print(total, count)
        # print('match_list :  ', match_list)

        file_path = os.path.join(BASE_DIR, 'mainapp/emotion_dic.xlsx')
        emotion_dic = pd.read_excel(file_path)
        score_1 = emotion_dic['score'] == 1
        words_1 = emotion_dic[score_1]['word'].values.tolist()
        score_2 = emotion_dic['score'] == 2
        words_2 = emotion_dic[score_2]['word'].values.tolist()
        score_4 = emotion_dic['score'] == 4
        words_4 = emotion_dic[score_4]['word'].values.tolist()
        score_5 = emotion_dic['score'] == 5
        words_5 = emotion_dic[score_5]['word'].values.tolist()
        # print('words_5 :  ',words_5)

        okt = Okt()
        pos = okt.pos(summary, stem=True)
        morphs = []
        for i in range(0, len(pos)):
            morphs.append(pos[i][0])
        # print('morphs :  ',morphs)

        if POS_score>0:
            count_4 = 0
            count_5 = 0
            for i in range(0, len(morphs)):
                if morphs[i] in words_4:
                    count_4 += 1
                elif morphs[i] in words_5:
                    count_5 += 1
                else:
                    pass
            # print('Í∏ç : ', count_4, count_5)
            if count_4 < count_5:
                score_1 = 5
            else:
                score_1 = 4

        elif POS_score<0:
            count_1 = 0
            count_2 = 0
            for i in range(0, len(morphs)):
                if morphs[i] in words_1:
                    count_1 += 1
                elif morphs[i] in words_2:
                    count_2 += 1
                else:
                    pass
            # print('Î∂Ä : ', count_1, count_2)
            if count_2 < count_1:
                score_1 = 1
            else:
                score_1 = 2     
        else:
            score_1 = 3  

        print("Ï†ïÏÑúÏÉÅ Ï†êÏàò: ", score_1)


        # ------------------------------ ÏûêÏïÑÏÉÅ Î™®Îç∏ ------------------------------
        # 1~4: 1Ï†ê 5~8: 2Ï†ê 9~12: 4Ï†ê 13~16: 5Ï†ê
        
        # print(self_select)
        counts = [0,0,0,0,0]
        select_list1 = ['1','2','3','4']
        select_list2 = ['5','6','7','8']
        select_list4 = ['9','10','11','12']
        select_list5=['13','14','15','16']

        import re

        n = re.sub('[\[\]\']', '', self_select)
        self_select_list = n.replace(' ','').split(",")
        print('self_select_list : ',self_select_list)

        # ÏûêÏïÑÏÉÅÏóê ÏûÖÎ†•o
        if mydia.self_image:
            for num in self_select_list:
                # print(num)
                if num in select_list1:
                    counts[0]+=1
                elif num in select_list2:
                    counts[1]+=1
                elif num in select_list4:
                    counts[3]+=1
                elif num in select_list5:
                    counts[4]+=1
            # print('self_select : ', self_select)
            print('counts : ', counts)

            # ÏµúÎåìÍ∞íÏùÑ Í∞ÄÏßÄÎäî Ïù∏Îç±Ïä§ Î™®Îëê Ï∞æÍ∏∞
            max_counts = []
            max_count = max(counts)
            for i, j in enumerate(counts):
                if j == max_count:
                    max_counts.append(i)
            print('max_count : ', max_count)
            print('max_counts : ',max_counts)

            # Ï†êÏàòÎÇ¥Í∏∞
            if max_counts[0] == 0:
                score_2 = 1
                print('ÏûêÏïÑÏÉÅÏ†êÏàò: ', score_2)
            elif max_counts[0] == 1:
                score_2 = 2
                print('ÏûêÏïÑÏÉÅÏ†êÏàò: ', score_2)
            elif max_counts[0] == 3:
                if len(max_counts) != 1:
                    score_2 = 5
                    print('ÏûêÏïÑÏ†êÏàò: ', score_2)
                else:
                    score_2 = 4
                    print('ÏûêÏïÑÏ†êÏàò: ', score_2)
            else:
                score_2 = 5
                print('ÏûêÏïÑÏ†êÏàò: ', score_2)

        # ÏûêÏïÑÏÉÅÏóê ÏïÑÎ¨¥Í≤ÉÎèÑ ÏûÖÎ†•x   
        else:
            # counts[2] += 1
            score_2 = 3
            print('ÏûêÏïÑÏÉÅÏ†êÏàò: ', score_2)
        

        # ------------------------------ ÏûêÍ∏∞Î≥¥Í≥† Î™®Îç∏ ------------------------------
        score_3 = int(feel)
        print('ÏûêÍ∏∞Î≥¥Í≥†Ï†êÏàò: ', score_3)

        # ------------------------------ Ï¥ùÌï©Ï†êÏàò Î™®Îç∏ ------------------------------
        result = (score_1 + score_2 + score_3) / 3.0
        print('@@@@@@@@@@@@@@@@result: ',result)
        total_result = round(result, 2)
        print('Ï¥ùÌï©Ïö∞Ïö∏Ï†êÏàò: ', total_result)

        if float(result)<2:
            level = 1
        elif float(result)>=2 and float(result)<3:
            level = 2
        else:
            level = 3

        # dbÏóê Ï†êÏàòÏ†ÄÏû•
        mydia.score1 = score_1
        mydia.score2 = score_2
        mydia.score3 = score_3
        mydia.total_score = total_result
        mydia.level = level
        mydia.save()

        context = {
            'user': Users,
            'data': mydia,
            'score_1': score_1,
            'score_2': score_2,
            'score_3': score_3,
            'total_score': total_result,
            'level' : level
        }
        
    return render(request, 'result.html', context)

def home(request):
    return render(request, 'home.html')

def que3(request, user_pk, dia_pk):
    Users = User.objects.get(pk=user_pk)
    # que = MyDiagnosis.objects.get(diagnosis=Users)
    # mydias = MyDiagnosis.objects.filter(diagnosis=Users, pk=dia_pk)

    if request.POST:
        mydia = MyDiagnosis.objects.get(pk=dia_pk)
        # mydia.update(
        #     self_image = request.POST['symbol'],
        #     self_select = request.POST.getlist('symbol_emo')
        # )

        mydia.self_image = request.POST['symbol']
        mydia.self_select = request.POST.getlist('symbol_emo')
        mydia.save()

        context = {
            'user': Users,
            'data': mydia
        }
        return render(request, 'que3.html', context)

    context = {
    'user': Users,
    'data': mydia
    }

    return render(request, 'que3.html', context)

def que2(request, user_pk, dia_pk):
    Users = User.objects.get(pk=user_pk)
    # que = MyDiagnosis.objects.get(diagnosis=Users)
    # mydias = MyDiagnosis.objects.filter(diagnosis=Users)

    # print(que)
    # print(que.diagnosis)
    if request.POST:
        mydia = MyDiagnosis.objects.get(pk=dia_pk)
        # mydia.update(
        #     summary = request.POST['summary']
        # )
        mydia.summary = request.POST['summary']
        mydia.save()

        context = {
            'user': Users,
            'data': mydia
        }
        return render(request, 'que2.html', context)

    context = {
        'user': Users,
        'data': mydia
    }

    return render(request, 'que2.html', context)

def que1(request, user_pk):
    Users = User.objects.get(pk=user_pk)
    # que = MyDiagnosis.objects.get(diagnosis=Users)
    
    if request.POST:
        mydia = MyDiagnosis()
        mydia.diagnosis = request.user
        mydia.image = request.FILES['images']
        mydia.save()
        # update_dia = MyDiagnosis.objects.filter(diagnosis=Users)
        # if len(update_dia) > 0:
        #     que = MyDiagnosis.objects.get(diagnosis=Users)
        #     print('update!@@@@@@@@@@')
        #     que.image = request.FILES['images']
        #     que.save()

        # else:
        #     print('no update@@@@@@@@@@@@')
        #     mydia = MyDiagnosis()
        #     mydia.diagnosis = request.user
        #     mydia.image = request.FILES['images']
        #     mydia.save()

        context = {
            'user': Users,
            'data': mydia
        }
        return render(request, 'que1.html', context)
        
    context = {
        'user': Users,
    }

    return render(request, 'que1.html', context)


def draw(request, user_pk):
    Users = User.objects.get(pk=user_pk)
    if request.POST:

        num = request.POST.getlist('imeg[]')
        if len(num) != 2:
            messages.info(request, 'Í∑∏Î¶º ÎëêÍ∞úÎ•º Í≥®ÎùºÏ£ºÏÑ∏Ïöî!')
            return redirect('/select/' + str(user_pk))
        else:
            num1 = num[0]
            num2 = num[1]
            # print(num1, num2)

            context = {
                'img1': num1+'.PNG',
                'img2': num2+'.PNG',
                'user': Users,
            }
            return render(request, 'draw.html', context)

    else:
        return redirect('/select/' + str(user_pk))
        
    return render(request, 'draw.html')

def select(request, user_pk):
    Users = User.objects.get(pk=user_pk)

    context = {
        'user': Users
    }

    return render(request, 'select.html', context)

def diagnosis(request, user_pk):
    Users = User.objects.get(pk=user_pk)

    context = {
        'user': Users
    }

    return render(request, 'diagnosis.html', context)

def mypage(request, user_pk):
    Users = User.objects.get(pk=user_pk)
    myaccount = Account.objects.get(user=Users)
    mydia = MyDiagnosis.objects.filter(diagnosis=Users)
    myrecord = Record.objects.filter(record_user=Users)
    record_elly = Record.objects.filter(writer='elly')

    # ÏßÑÎã®ÎÇ†Ïßú ÌÅ¥Î¶≠Ïãú Ìï¥Îãπ dbÎ≥¥Ïó¨Ï£ºÍ∏∞
    detail_dia = MyDiagnosis.objects.filter(diagnosis=Users)[:1].get()

    # Ï∞ΩÏõê ÏûëÏÑ±_2020/12/04 16:31 
    # --------------------------------------------------------------
    MyDiagnosis_obj = MyDiagnosis.objects.all().values()
    df = pd.DataFrame(MyDiagnosis_obj)
    user_obj = df[df['diagnosis_id']==user_pk]
    user_obj.reset_index(inplace=True)
    # Îç∞Ïù¥ÌÑ∞ ÌîÑÎ†àÏûÑ ÎßåÎì§Í∏∞
        
    # Í∑∏ÎûòÌîÑÎ°ú Í∑∏Î¶¥ Ìï≠Î™© Î¶¨Ïä§Ìä∏ ÎßåÎì§Í∏∞
    created_date, score1, score2, score3, total_score = [], [], [], [], []
    # Í∞Å Ìï≠Î™© Î¶¨Ïä§Ìä∏ ÎßåÎì§Í∏∞
    for i in range(user_obj.shape[0]):
        created_date.append(str(user_obj['created_date'][i]))
        score1.append(float(user_obj['score1'][i]))
        score2.append(float(user_obj['score2'][i]))
        score3.append(float(user_obj['score3'][i]))
        total_score.append(float(user_obj['total_score'][i]))
    
    # Í∑∏ÎûòÌîÑ Í∑∏Î¶¨Í∏∞
    plt.plot(created_date, score1, marker='o', label='Ï†ïÏÑú ÎÇ¥Ïö©')
    plt.plot(created_date, score2, marker='x', label='ÏûêÏïÑÏÉÅ')
    plt.plot(created_date, score3, marker='^', label='ÏûêÍ∏∞Î≥¥Í≥†')
    plt.plot(created_date, total_score, marker='+', label='ÏµúÏ¢ÖÏ†êÏàò')
    plt.legend(loc='upper right')
    plt.xlabel('ÎÇ†Ïßú')
    plt.ylabel('Ï†êÏàò')
    plt.title(str(Users)+'ÎãòÏùò ÏßÑÎã® Í≤∞Í≥º')
    plt.ylim([0,6])

    # Í∑∏ÎûòÌîÑ Í∑∏Î¶ºÌååÏùºÎ°ú Ï†ÄÏû•
    path = os.path.join(BASE_DIR, 'media/images/21_29')
    plt.savefig(path)
    paths = 'media/images/21_29' +'.png'
    plt.close()
    context = {
        'user': Users,
        'myaccount': myaccount,
        'mydia': mydia,
        'myrecord': myrecord,
        'record_elly' : record_elly,
        'detail_dia': detail_dia,
        'path': paths
    }
    return render(request, 'mypage.html', context) 

ERROR_MSG = {
    'ID_EXIST': 'Ïù¥ÎØ∏ ÏÇ¨Ïö© Ï§ëÏù∏ ÏïÑÏù¥Îîî ÏûÖÎãàÎã§.',
    'ID_NOT_EXIST': 'Ï°¥Ïû¨ÌïòÏßÄ ÏïäÎäî ÏïÑÏù¥Îîî ÏûÖÎãàÎã§',
    'ID_PW_MISSING': 'ÏïÑÏù¥ÎîîÏôÄ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
    'PW_CHECK': 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.',
}


def logout(request):
    auth.logout(request)
    return redirect('home')

def signup(request):
    context = {
        'error': {
            'state': False,
            'msg': ''
        }
    }
    if request.method == 'POST':
        
        user_id = request.POST['user_id']
        user_pw = request.POST['user_pw']
        user_pw_check = request.POST['user_pw_check']
        # add
        user_name = request.POST['name']
        user_nickname = request.POST['nickname']
        user_email = request.POST['email']
        user_gender = request.POST['gender']
        user_age = request.POST['age']

        if (user_id and user_pw):
            user = User.objects.filter(username=user_id)
            if len(user) == 0:
                if (user_pw == user_pw_check):
                    created_user = User.objects.create_user(
                        username=user_id,
                        password=user_pw
                    )
                    # add
                    Account.objects.create(
                        user = created_user,
                        name = user_name,
                        nickname = user_nickname,
                        email = user_email,
                        gender = user_gender,
                        age = user_age,
                    )

                    auth.login(request, created_user)
                    return redirect('home')
                else:
                    context['error']['state'] = True
                    context['error']['msg'] = ERROR_MSG['PW_CHECK']
            else:
                context['error']['state'] = True
                context['error']['msg'] = ERROR_MSG['ID_EXIST']
        else:
            context['error']['state'] = True
            context['error']['msg'] = ERROR_MSG['ID_PW_MISSING']

    return render(request, 'signup.html', context)

def login(request):
    context = {
        'error': {
            'state': False,
            'msg': ''
        },
    }
    if request.method == 'POST':
        user_id = request.POST['user_id']
        user_pw = request.POST['user_pw']

        user = User.objects.filter(username=user_id)
        if (user_id and user_pw):
            if len(user) != 0:
                user = auth.authenticate(
                    username=user_id,
                    password=user_pw
                )
                if user != None:
                    auth.login(request, user)

                    return redirect('home')
                else:
                    context['error']['state'] = True
                    context['error']['msg'] = ERROR_MSG['PW_CHECK']
            else:
                context['error']['state'] = True
                context['error']['msg'] = ERROR_MSG['ID_NOT_EXIST']
        else:
            context['error']['state'] = True
            context['error']['msg'] = ERROR_MSG['ID_PW_MISSING']

    return render(request, 'login.html', context)